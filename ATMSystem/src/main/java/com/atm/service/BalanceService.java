package com.atm.service;

import com.atm.dto.AccountDTO;
import com.atm.model.Account;
import com.atm.model.Balance;
import com.atm.repository.AccountRepository;
import com.atm.repository.BalanceRepository;
import com.atm.model.TransactionType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class BalanceService {
    private final AccountRepository accountRepository;
    private final BalanceRepository balanceRepository;

    @Autowired
    public BalanceService(AccountRepository accountRepository,BalanceRepository balanceRepository) {
        this.accountRepository = accountRepository;
        this.balanceRepository = balanceRepository;
    }

    public Double getBalance(String accountNumber) {
        // L·∫•y t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p
        String loggedInAccountNumber = getLoggedInAccountNumber();

        // Ki·ªÉm tra xem t√†i kho·∫£n y√™u c·∫ßu c√≥ ph·∫£i c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p hay kh√¥ng
        if (!accountNumber.equals(loggedInAccountNumber)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p s·ªë d∆∞ c·ªßa t√†i kho·∫£n n√†y.");
        }

        return accountRepository.findByAccountNumber(accountNumber)
                .map(Account::getBalance)
                .orElseThrow(() -> new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."));
    }

    public void updateBalance(AccountDTO accountDTO, Account account, TransactionType transactionType) {
        // Ki·ªÉm tra n·∫øu s·ªë d∆∞ m·ªõi kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá
        if (accountDTO.getBalance() == null || accountDTO.getBalance() <= 0) {
            throw new IllegalArgumentException("S·ªë d∆∞ ph·∫£i l·ªõn h∆°n 0.");
        }

        // Ki·ªÉm tra n·∫øu Balance ch∆∞a t·ªìn t·∫°i
        Balance balance = account.getBalanceEntity();
        if (balance == null) {
            // S·ª≠ d·ª•ng h√†m createBalance ƒë·ªÉ t·∫°o Balance m·ªõi
            createBalance(account);
            balance = account.getBalanceEntity(); // L·∫•y Balance v·ª´a t·∫°o
        }

        // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i v√† chu·∫©n b·ªã c·∫≠p nh·∫≠t
        double currentBalance = balance.getBalance();
        double updatedBalance = currentBalance;

        // X·ª≠ l√Ω logic d·ª±a tr√™n lo·∫°i giao d·ªãch
        switch (transactionType) {
            case Deposit:
                // N·∫°p ti·ªÅn
                updatedBalance += accountDTO.getBalance();
                break;

            case Withdrawal:
                // R√∫t ti·ªÅn
                if (currentBalance < accountDTO.getBalance()) {
                    throw new IllegalArgumentException("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch r√∫t ti·ªÅn.");
                }
                updatedBalance -= accountDTO.getBalance();
                break;

            case WITHDRAWAL_OTP:
                // R√∫t ti·ªÅn OTP
                if (currentBalance < accountDTO.getBalance()) {
                    throw new IllegalArgumentException("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch r√∫t ti·ªÅn OTP.");
                }
                updatedBalance -= accountDTO.getBalance();
                // Logic b·ªï sung nh∆∞ x√°c th·ª±c OTP c√≥ th·ªÉ ƒë∆∞·ª£c th√™m t·∫°i ƒë√¢y
                break;

            case TRANSFER:
                // Logic chuy·ªÉn kho·∫£n c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng
                throw new UnsupportedOperationException("Ch·ª©c nƒÉng chuy·ªÉn kho·∫£n c·∫ßn x·ª≠ l√Ω ri√™ng cho t√†i kho·∫£n ngu·ªìn v√† ƒë√≠ch.");

            default:
                throw new IllegalArgumentException("Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá.");
        }

        // C·∫≠p nh·∫≠t s·ªë d∆∞ m·ªõi
        balance.setBalance(updatedBalance);
        balance.setLastUpdated(LocalDateTime.now()); // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
        balanceRepository.save(balance); // L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
    }

    // H√†m l·∫•y s·ªë t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    public String getLoggedInAccountNumber() {
        System.out.println("üîç Ki·ªÉm tra SecurityContextHolder: " + SecurityContextHolder.getContext().getAuthentication());

        if (SecurityContextHolder.getContext().getAuthentication() == null) {
            System.out.println("‚ùå SecurityContextHolder is NULL!");
            return null;
        }

        return (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }

    public void createBalance(Account account) {
        Balance balance = new Balance();
        balance.setAccount(account);
        balance.setBalance(0.0);
        balance.setLastUpdated(LocalDateTime.now());
        balanceRepository.save(balance);
    }
}
