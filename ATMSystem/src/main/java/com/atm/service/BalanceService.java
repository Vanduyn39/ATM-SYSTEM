package com.atm.service;

import com.atm.dto.AccountDTO;
import com.atm.model.Account;
import com.atm.model.Balance;
import com.atm.repository.AccountRepository;
import com.atm.repository.BalanceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

@Service
public class BalanceService {
    private final AccountRepository accountRepository;
    private final BalanceRepository balanceRepository;

    @Autowired
    public BalanceService(AccountRepository accountRepository,BalanceRepository balanceRepository) {
        this.accountRepository = accountRepository;
        this.balanceRepository = balanceRepository;
    }

    public Double getBalance(String accountNumber) {
        // L·∫•y t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p
        String loggedInAccountNumber = getLoggedInAccountNumber();

        // Ki·ªÉm tra xem t√†i kho·∫£n y√™u c·∫ßu c√≥ ph·∫£i c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p hay kh√¥ng
        if (!accountNumber.equals(loggedInAccountNumber)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p s·ªë d∆∞ c·ªßa t√†i kho·∫£n n√†y.");
        }

        return accountRepository.findByAccountNumber(accountNumber)
                .map(Account::getBalance)
                .orElseThrow(() -> new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."));
    }

    public void updateBalance(AccountDTO accountDTO, Account account) {
        if (accountDTO.getBalance() != null) {
            if (account.getBalanceEntity() == null) {
                // N·∫øu ch∆∞a c√≥ Balance, t·∫°o m·ªõi
                Balance newBalance = new Balance();
                newBalance.setBalance(accountDTO.getBalance()); // C·∫≠p nh·∫≠t s·ªë d∆∞ m·ªõi
                newBalance.setAccount(account); // Li√™n k·∫øt Balance v·ªõi Account
                account.setBalanceEntity(newBalance); // G·∫Øn Balance v√†o Account
                balanceRepository.save(newBalance); // L∆∞u Balance m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
            } else {
                // N·∫øu ƒë√£ c√≥ Balance, ch·ªâ c·∫≠p nh·∫≠t gi√° tr·ªã s·ªë d∆∞
                Balance existingBalance = account.getBalanceEntity();
                existingBalance.setBalance(accountDTO.getBalance());
                balanceRepository.save(existingBalance); // L∆∞u Balance ƒë√£ c·∫≠p nh·∫≠t
            }
        }
    }

    // H√†m l·∫•y s·ªë t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    public String getLoggedInAccountNumber() {
        System.out.println("üîç Ki·ªÉm tra SecurityContextHolder: " + SecurityContextHolder.getContext().getAuthentication());

        if (SecurityContextHolder.getContext().getAuthentication() == null) {
            System.out.println("‚ùå SecurityContextHolder is NULL!");
            return null;
        }

        return (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }
}
