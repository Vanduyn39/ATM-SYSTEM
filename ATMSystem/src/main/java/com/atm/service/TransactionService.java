package com.atm.service;

import com.atm.dto.ApiResponse;
import com.atm.dto.WithdrawOtpRequest;
import com.atm.model.Credential;
import com.atm.model.Transaction;
import com.atm.model.Account;
import com.atm.repository.AccountRepository;
import com.atm.repository.TransactionRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import com.atm.model.TransactionType;
import com.atm.util.JwtUtil;
import org.springframework.stereotype.Service;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class TransactionService {

    private final AccountService accountService;
    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;
    private final JwtUtil jwtUtil;
    private final Set<String> blacklistedTokens = ConcurrentHashMap.newKeySet();
    private final PasswordEncoder passwordEncoder;


    @Autowired
    public TransactionService(AccountService accountService,
                              AccountRepository accountRepository,
                              TransactionRepository transactionRepository,
                              JwtUtil jwtUtil,
                              PasswordEncoder passwordEncoder) {  // Inject passwordEncoder v√†o constructor
        this.accountService = accountService;
        this.accountRepository = accountRepository;
        this.transactionRepository = transactionRepository;
        this.jwtUtil = jwtUtil;
        this.passwordEncoder = passwordEncoder;  // G√°n gi√° tr·ªã cho passwordEncoder
    }

    // üìå ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ token JWT
    public String login(String accountNumber, String pin) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);

        if (accountOpt.isPresent()) {
            Account account = accountOpt.get();
            Credential credential = account.getCredential();

            if (credential != null && verifyPin(pin, credential.getPin())) {  // So s√°nh pin v·ªõi Credential
                if (account.getRole() == null) {
                    account.setRole("USER");
                    accountRepository.save(account);
                }

                // T·∫°o JWT token
                long expirationTime = 3600000; // 1 gi·ªù
                String token = jwtUtil.generateToken(accountNumber, account.getRole(), expirationTime);

                System.out.println("Generated Token: " + token);

                return token;
            }
        }

        return null; // Tr·∫£ v·ªÅ null n·∫øu t√†i kho·∫£n kh√¥ng h·ª£p l·ªá
    }

    // Ph∆∞∆°ng th·ª©c ki·ªÉm tra pin (s·ª≠ d·ª•ng m√£ h√≥a)
    private boolean verifyPin(String rawPin, String encodedPin) {
        return passwordEncoder.matches(rawPin, encodedPin);  // So s√°nh pin nh·∫≠p v√†o v·ªõi pin ƒë√£ m√£ h√≥a
    }

    @Transactional
    public ApiResponse<String> processTransaction(String token, double amount, TransactionType transactionType, String targetAccountNumber) {
        // X√°c minh token v√† ki·ªÉm tra quy·ªÅn
        String accountNumber = jwtUtil.validateToken(token);
        if (accountNumber == null) {
            return new ApiResponse<>("Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n", null);
        }

        String role = jwtUtil.getRoleFromToken(token);
        if (!"USER".equals(role)) {
            return new ApiResponse<>("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán giao d·ªãch n√†y", null);
        }

        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
        if (accountOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n", null);
        }

        Account account = accountOpt.get();

        synchronized (account) {
            switch (transactionType) {
                case WITHDRAWAL:
                    return handleWithdraw(account, amount);
                case DEPOSIT:
                    return handleDeposit(account, amount);
                case TRANSFER:
                    return handleTransfer(account, targetAccountNumber, amount);
                default:
                    return new ApiResponse<>("Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá", null);
            }
        }
    }

    private ApiResponse<String> handleWithdraw(Account account, double amount) {
        if (amount > account.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch", null);
        }

        account.setBalance(account.getBalance() - amount);
        accountRepository.save(account);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(
                account.getAccountNumber(),
                amount,
                TransactionType.WITHDRAWAL,
                new Date()
        );
        try {
            transactionRepository.save(transaction);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("R√∫t ti·ªÅn th√†nh c√¥ng", String.valueOf(account.getBalance()));
    }

    private ApiResponse<String> handleDeposit(Account account, double amount) {
        account.setBalance(account.getBalance() + amount);
        accountRepository.save(account);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(
                account.getAccountNumber(),
                amount,
                TransactionType.DEPOSIT,
                new Date()
        );
        try {
            transactionRepository.save(transaction);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("N·∫°p ti·ªÅn th√†nh c√¥ng", String.valueOf(account.getBalance()));
    }

    private ApiResponse<String> handleTransfer(Account sourceAccount, String targetAccountNumber, double amount) {
        if (amount > sourceAccount.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch chuy·ªÉn ti·ªÅn", null);
        }

        Optional<Account> targetAccountOpt = accountRepository.findByAccountNumber(targetAccountNumber);
        if (targetAccountOpt.isEmpty()) {
            return new ApiResponse<>("T√†i kho·∫£n nh·∫≠n kh√¥ng h·ª£p l·ªá", null);
        }

        Account targetAccount = targetAccountOpt.get();

        // Tr·ª´ ti·ªÅn t√†i kho·∫£n ngu·ªìn
        sourceAccount.setBalance(sourceAccount.getBalance() - amount);
        accountRepository.save(sourceAccount);

        // C·ªông ti·ªÅn t√†i kho·∫£n ƒë√≠ch
        targetAccount.setBalance(targetAccount.getBalance() + amount);
        accountRepository.save(targetAccount);

        // L∆∞u giao d·ªãch t√†i kho·∫£n ngu·ªìn
        Transaction transactionSource = new Transaction(
                sourceAccount.getAccountNumber(),
                amount,
                TransactionType.TRANSFER,
                new Date()
        );

        // L∆∞u giao d·ªãch t√†i kho·∫£n ƒë√≠ch
        Transaction transactionTarget = new Transaction(
                targetAccount.getAccountNumber(),
                amount,
                TransactionType.DEPOSIT,
                new Date()
        );

        try {
            transactionRepository.save(transactionSource);
            transactionRepository.save(transactionTarget);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("Chuy·ªÉn ti·ªÅn th√†nh c√¥ng", String.valueOf(sourceAccount.getBalance()));
    }

    public ApiResponse<String> processWithdrawWithOtp(WithdrawOtpRequest request) {
        // 1. Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
        if (request.getPhoneNumber() == null || request.getOtp() == null || request.getAccountNumber() == null) {
            return new ApiResponse<>("S·ªë ƒëi·ªán tho·∫°i, OTP v√† s·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc.", null);
        }

        // 2. X√°c th·ª±c OTP (s·ª≠ d·ª•ng m√£ c·ªë ƒë·ªãnh)
        if (!"123456".equals(request.getOtp())) {
            return new ApiResponse<>("OTP kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.", null);
        }

        // 3. L·∫•y t√†i kho·∫£n t·ª´ c∆° s·ªü d·ªØ li·ªáu
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(request.getAccountNumber());
        if (accountOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë t√†i kho·∫£n ƒë√£ cung c·∫•p.", null);
        }

        Account account = accountOpt.get();

        // 4. Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n
        if (request.getAmount() > account.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.", null);
        }

        // 5. Tr·ª´ ti·ªÅn v√† c·∫≠p nh·∫≠t t√†i kho·∫£n
        synchronized (account) {
            account.setBalance(account.getBalance() - request.getAmount());
            account.setLastUpdated(LocalDateTime.now());
            accountRepository.save(account);
        }

        // 6. L∆∞u th√¥ng tin giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu
        Transaction transaction = new Transaction(
                request.getAccountNumber(),
                request.getAmount(),
                TransactionType.WITHDRAWAL_OTP, // Truy·ªÅn tr·ª±c ti·∫øp gi√° tr·ªã enum
                new Date()
        );
        transactionRepository.save(transaction);

        // 7. Tr·∫£ k·∫øt qu·∫£ giao d·ªãch th√†nh c√¥ng
        return new ApiResponse<>("Giao d·ªãch r√∫t ti·ªÅn th√†nh c√¥ng.", String.valueOf(account.getBalance()));
    }

    // üìå Xem l·ªãch s·ª≠ giao d·ªãch
    public ApiResponse<List<Transaction>> getTransactionHistory(String accountNumber) {
        List<Transaction> transactions = transactionRepository.findByAccountNumber(accountNumber);
        return new ApiResponse<>("L·ªãch s·ª≠ giao d·ªãch", transactions);
    }

    public void logout(String token) {
        if (token != null) {
            blacklistedTokens.add(token);
        }
    }

    public boolean isTokenBlacklisted(String token) {
        return token != null && blacklistedTokens.contains(token);
    }
}