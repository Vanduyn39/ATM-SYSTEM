package com.atm.service;

import com.atm.model.Transaction;
import com.atm.model.Account;
import com.atm.repository.AccountRepository;
import com.atm.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.atm.model.TransactionType;
import com.atm.util.JwtUtil;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class TransactionService {

    private final AccountService accountService;
    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;
    private final JwtUtil jwtUtil;

    @Autowired
    public TransactionService(AccountService accountService, AccountRepository accountRepository, TransactionRepository transactionRepository, JwtUtil jwtUtil) {
        this.accountService = accountService;
        this.accountRepository = accountRepository;
        this.transactionRepository = transactionRepository;
        this.jwtUtil = jwtUtil;
    }

    // üìå ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ token JWT
    public String login(String accountNumber, String pin) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
        if (accountOpt.isPresent() && verifyPin(pin, accountOpt.get().getPin())) {
            // L·∫•y vai tr√≤ c·ªßa t√†i kho·∫£n, gi·∫£ s·ª≠ l√† ADMIN ho·∫∑c USER (ho·∫∑c b·∫•t k·ª≥ gi√° tr·ªã n√†o b·∫°n s·ª≠ d·ª•ng)
            String role = accountOpt.get().getRole(); // B·∫°n c·∫ßn ƒë·∫£m b·∫£o r·∫±ng Account c√≥ ph∆∞∆°ng th·ª©c getRole() ho·∫∑c t∆∞∆°ng t·ª±
            return jwtUtil.generateToken(accountNumber, role); // Truy·ªÅn c·∫£ accountNumber v√† role v√†o
        }
        return null;
    }

    // üìå Ki·ªÉm tra m√£ PIN
    private boolean verifyPin(String inputPin, String actualPin) {
        return inputPin.equals(actualPin);
    }

    // üìå R√∫t ti·ªÅn
    public boolean withdraw(String token, double amount, TransactionType transactionType) {
        String accountNumber = jwtUtil.validateToken(token);
        if (accountNumber == null) return false;

        Account account = accountService.getAccount(accountNumber);
        if (account == null || amount > account.getBalance()) {
            return false;
        }

        // Tr·ª´ ti·ªÅn v√† c·∫≠p nh·∫≠t t√†i kho·∫£n
        account.setBalance(account.getBalance() - amount);
        account.setLastUpdated(LocalDateTime.now());
        accountRepository.save(account);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(accountNumber, amount, transactionType, new Date());
        transactionRepository.save(transaction);
        return true;
    }

    // üìå R√∫t ti·ªÅn qua OTP
    public boolean withdrawWithOtp(String accountNumber, String phoneNumber, double amount, TransactionType transactionType) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
        if (accountOpt.isEmpty()) return false;

        Account account = accountOpt.get();
        if (amount > account.getBalance()) return false;

        // Tr·ª´ ti·ªÅn v√† c·∫≠p nh·∫≠t t√†i kho·∫£n
        account.setBalance(account.getBalance() - amount);
        account.setLastUpdated(LocalDateTime.now());
        accountRepository.save(account);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(accountNumber, amount, transactionType, new Date());
        transactionRepository.save(transaction);
        return true;
    }

    // üìå X√°c th·ª±c OTP (Gi·∫£ l·∫≠p - n√™n d√πng d·ªãch v·ª• OTP th·ª±c t·∫ø)
    public boolean validateOtp(String accountNumber, String phoneNumber, String otp) {
        // Th√™m logic ki·ªÉm tra accountNumber v√† phoneNumber n·∫øu c·∫ßn
        return "123456".equals(otp);  // T·∫°m th·ªùi hard-code, n√™n thay th·∫ø b·∫±ng gi·∫£i ph√°p OTP th·ª±c t·∫ø
    }

    // üìå Xem l·ªãch s·ª≠ giao d·ªãch
    public List<Transaction> getTransactionHistory(String accountNumber) {
        return transactionRepository.findByAccountNumber(accountNumber);
    }
}