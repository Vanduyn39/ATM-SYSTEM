package com.atm.service;

import com.atm.dto.AccountDTO;
import com.atm.dto.ApiResponse;
import com.atm.dto.WithdrawOtpRequest;
import com.atm.model.*;
import com.atm.repository.AccountRepository;
import com.atm.repository.TransactionRepository;
import com.atm.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import com.atm.util.JwtUtil;

import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class TransactionService {

    private final AccountService accountService;
    private final AccountRepository accountRepository;
    private final TransactionRepository transactionRepository;
    private final JwtUtil jwtUtil;
    private final Set<String> blacklistedTokens = ConcurrentHashMap.newKeySet();
    private final PasswordEncoder passwordEncoder;
    private final CredentialService credentialService;
    private final BalanceService balanceService;
    private final UserRepository userRepository;

    private static final Logger logger = LoggerFactory.getLogger(TransactionService.class);



    @Autowired
    public TransactionService(AccountService accountService,
                              AccountRepository accountRepository,
                              TransactionRepository transactionRepository,
                              JwtUtil jwtUtil,
                              PasswordEncoder passwordEncoder,
                              CredentialService credentialService,
                              BalanceService balanceService,
                              UserRepository userRepository) {  // Inject passwordEncoder v√†o constructor
        this.accountService = accountService;
        this.accountRepository = accountRepository;
        this.transactionRepository = transactionRepository;
        this.jwtUtil = jwtUtil;
        this.passwordEncoder = passwordEncoder;  // G√°n gi√° tr·ªã cho passwordEncoder
        this.credentialService=credentialService;
        this.balanceService=balanceService;
        this.userRepository = userRepository;
    }

    // üìå ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ token JWT
    public String login(String accountNumber, String pin) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);

        if (accountOpt.isPresent()) {
            Account account = accountOpt.get();
            Credential credential = account.getCredential();

            if (credential != null && credentialService.validatePIN(pin, credential.getPin())) {  // So s√°nh pin v·ªõi Credential
                if (account.getRole() == null) {
                    account.setRole("USER");
                    accountRepository.save(account);
                }

                // T·∫°o JWT token
                long expirationTime = 3600000; // 1 gi·ªù
                String token = jwtUtil.generateToken(accountNumber, account.getRole(), expirationTime);

                System.out.println("Generated Token: " + token);

                return token;
            }
        }

        return null; // Tr·∫£ v·ªÅ null n·∫øu t√†i kho·∫£n kh√¥ng h·ª£p l·ªá
    }

    @Transactional
    public ApiResponse<String> recordTransaction(String token, double amount, TransactionType transactionType, String targetAccountNumber) {
        // X√°c minh token v√† quy·ªÅn
        String accountNumber = jwtUtil.validateToken(token);
        if (accountNumber == null) {
            return new ApiResponse<>("Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n", null);
        }

        String role = jwtUtil.getRoleFromToken(token);
        if (!"USER".equals(role)) {
            return new ApiResponse<>("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán giao d·ªãch n√†y", null);
        }

        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
        if (accountOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n", null);
        }

        Account account = accountOpt.get();

        // Th·ª±c hi·ªán giao d·ªãch
        switch (transactionType) {
            case Withdrawal:
                return handleWithdraw(account, amount);

            case Deposit:
                return handleDeposit(account, amount);

            case TRANSFER:
                return handleTransfer(account, targetAccountNumber, amount);

            default:
                return new ApiResponse<>("Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá", null);
        }
    }

    private ApiResponse<String> handleWithdraw(Account account, double amount) {
        if (amount > account.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch", null);
        }

        // T·∫°o DTO ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞
        AccountDTO withdrawalDTO = new AccountDTO();
        withdrawalDTO.setBalance(amount);
        balanceService.updateBalance(withdrawalDTO, account, TransactionType.Withdrawal);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(
                account.getAccountNumber(),
                amount,
                TransactionType.Withdrawal,
                new Date()
        );

        try {
            transactionRepository.save(transaction);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("R√∫t ti·ªÅn th√†nh c√¥ng", String.valueOf(account.getBalance()));
    }

    public ApiResponse<String> handleDeposit(Account account, double amount) {
        // T·∫°o DTO ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞
        AccountDTO depositDTO = new AccountDTO();
        depositDTO.setBalance(amount);
        balanceService.updateBalance(depositDTO, account, TransactionType.Deposit);

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(
                account.getAccountNumber(),
                amount,
                TransactionType.Deposit,
                new Date()
        );

        try {
            transactionRepository.save(transaction);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("N·∫°p ti·ªÅn th√†nh c√¥ng", String.valueOf(account.getBalance()));
    }

    private ApiResponse<String> handleTransfer(Account sourceAccount, String targetAccountNumber, double amount) {
        if (amount > sourceAccount.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch chuy·ªÉn ti·ªÅn", null);
        }

        Optional<Account> targetAccountOpt = accountRepository.findByAccountNumber(targetAccountNumber);
        if (targetAccountOpt.isEmpty()) {
            return new ApiResponse<>("T√†i kho·∫£n nh·∫≠n kh√¥ng h·ª£p l·ªá", null);
        }

        Account targetAccount = targetAccountOpt.get();

        // T·∫°o DTO ƒë·ªÉ tr·ª´ ti·ªÅn t√†i kho·∫£n ngu·ªìn
        AccountDTO transferSourceDTO = new AccountDTO();
        transferSourceDTO.setBalance(amount);
        balanceService.updateBalance(transferSourceDTO, sourceAccount, TransactionType.Withdrawal);

        // T·∫°o DTO ƒë·ªÉ c·ªông ti·ªÅn t√†i kho·∫£n ƒë√≠ch
        AccountDTO transferTargetDTO = new AccountDTO();
        transferTargetDTO.setBalance(amount);
        balanceService.updateBalance(transferTargetDTO, targetAccount, TransactionType.Deposit);

        // L∆∞u giao d·ªãch
        Transaction transactionSource = new Transaction(
                sourceAccount.getAccountNumber(),
                amount,
                TransactionType.TRANSFER,
                new Date()
        );

        Transaction transactionTarget = new Transaction(
                targetAccount.getAccountNumber(),
                amount,
                TransactionType.Deposit,
                new Date()
        );

        try {
            transactionRepository.save(transactionSource);
            transactionRepository.save(transactionTarget);
        } catch (Exception e) {
            e.printStackTrace();
            return new ApiResponse<>("Kh√¥ng th·ªÉ l∆∞u giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu", null);
        }

        return new ApiResponse<>("Chuy·ªÉn ti·ªÅn th√†nh c√¥ng", String.valueOf(sourceAccount.getBalance()));
    }

    public ApiResponse<String> sendOtpForWithdrawal(String accountNumber){
        // 1. Ki·ªÉm tra accountNumber ƒë·∫ßu v√†o
        if (accountNumber == null || accountNumber.isEmpty()) {
            return new ApiResponse<>("S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc.", null);
        }

        // 2. T√¨m t√†i kho·∫£n t·ª´ c∆° s·ªü d·ªØ li·ªáu
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
        if (accountOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë t√†i kho·∫£n ƒë√£ cung c·∫•p.", null);
        }
        Account account = accountOpt.get();

        // 3. T√¨m s·ªë ƒëi·ªán tho·∫°i t·ª´ b·∫£ng User
        Optional<User> userOpt = userRepository.findByUserId(account.getUser().getUserId()); // Li√™n k·∫øt account v·ªõi userId
        if (userOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho t√†i kho·∫£n n√†y.", null);
        }
        String phoneNumber = userOpt.get().getPhone();

        // 4. G·ª≠i OTP
        String generatedOtp = generateAndSendOtp(phoneNumber);
        return new ApiResponse<>("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.", generatedOtp);
    }

    public ApiResponse<String> processWithdrawWithOtp(WithdrawOtpRequest request) {
        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (request.getAccountNumber() == null || request.getAccountNumber().isEmpty()) {
            return new ApiResponse<>("S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc.", null);
        }
        if (request.getOtp() == null || request.getOtp().isEmpty()) {
            return new ApiResponse<>("OTP l√† b·∫Øt bu·ªôc.", null);
        }
        if (request.getAmount() == null || request.getAmount() <= 0) {
            return new ApiResponse<>("S·ªë ti·ªÅn mu·ªën r√∫t ph·∫£i l·ªõn h∆°n 0.", null);
        }

        // X√°c th·ª±c OTP
        if (!"123456".equals(request.getOtp())) {
            return new ApiResponse<>("OTP kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.", null);
        }

        // L·∫•y t√†i kho·∫£n t·ª´ c∆° s·ªü d·ªØ li·ªáu
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(request.getAccountNumber());
        if (accountOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë t√†i kho·∫£n ƒë√£ cung c·∫•p.", null);
        }
        Account account = accountOpt.get();

        // L·∫•y th√¥ng tin User ƒë·ªÉ ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
        Optional<User> userOpt = userRepository.findByUserId(account.getUser().getUserId());
        if (userOpt.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho t√†i kho·∫£n n√†y.", null);
        }
        String phoneNumber = userOpt.get().getPhone();

        // Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n
        if (request.getAmount() > account.getBalance()) {
            return new ApiResponse<>("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.", null);
        }

        // Th·ª±c hi·ªán r√∫t ti·ªÅn
        synchronized (account) {
            account.setBalance(account.getBalance() - request.getAmount());
            account.setLastUpdated(LocalDateTime.now());
            accountRepository.save(account);
        }

        // L∆∞u giao d·ªãch
        Transaction transaction = new Transaction(
                request.getAccountNumber(),
                request.getAmount(),
                TransactionType.fromString("WITHDRAWAL_OTP"), // B·∫£o ƒë·∫£m kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng
                new Date()
        );
        transactionRepository.save(transaction);

        // Tr·∫£ k·∫øt qu·∫£
        return new ApiResponse<>("Giao d·ªãch r√∫t ti·ªÅn th√†nh c√¥ng.", "S·ªë d∆∞ c√≤n l·∫°i: " + account.getBalance());
    }

    private String generateAndSendOtp(String phoneNumber) {
        // T·∫°o OTP ng·∫´u nhi√™n
        String otp = "123456"; // Ho·∫∑c s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p t·∫°o m√£ OTP th·ª±c t·∫ø
        logger.info("ƒêang g·ª≠i OTP {} t·ªõi s·ªë ƒëi·ªán tho·∫°i {}", otp, phoneNumber);
        // Logic g·ª≠i OTP t·ªõi s·ªë ƒëi·ªán tho·∫°i (API SMS ho·∫∑c t√≠ch h·ª£p kh√°c)
        return otp;
    }

    public ApiResponse<List<Transaction>> getTransactionHistory(String accountNumber) {
        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (accountNumber == null || accountNumber.isEmpty()) {
            return new ApiResponse<>("S·ªë t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng", null);
        }

        // L·∫•y l·ªãch s·ª≠ giao d·ªãch t·ª´ c∆° s·ªü d·ªØ li·ªáu
        List<Transaction> transactions;
        try {
            transactions = transactionRepository.findByAccountNumber(accountNumber);
        } catch (DataAccessException e) {
            System.err.println("L·ªói c∆° s·ªü d·ªØ li·ªáu: " + e.getMessage());
            return new ApiResponse<>("L·ªói khi truy xu·∫•t l·ªãch s·ª≠ giao d·ªãch t·ª´ c∆° s·ªü d·ªØ li·ªáu", null);
        } catch (Exception e) {
            System.err.println("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
            return new ApiResponse<>("L·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra", null);
        }

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ giao d·ªãch n√†o
        if (transactions == null || transactions.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ giao d·ªãch n√†o cho t√†i kho·∫£n n√†y", null);
        }

        // Tr·∫£ k·∫øt qu·∫£
        return new ApiResponse<>("L·ªãch s·ª≠ giao d·ªãch", transactions);
    }

    public  ApiResponse<List<Transaction>> getTransactionHistoryByUser(String userId) {
        if (userId == null || userId.isEmpty()) {
            return new ApiResponse<>("Input kh√¥ng h·ª£p l·ªá", null);
        }

        List<Transaction> transactions;
        try {
            transactions = transactionRepository.findByUserId(userId);
        } catch (DataAccessException e) {
            System.err.println("L·ªói c∆° s·ªü d·ªØ li·ªáu: " + e.getMessage());
            return new ApiResponse<>("L·ªói khi truy xu·∫•t l·ªãch s·ª≠ giao d·ªãch t·ª´ c∆° s·ªü d·ªØ li·ªáu", null);
        } catch (Exception e) {
            System.err.println("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
            return new ApiResponse<>("L·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra", null);
        }

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ giao d·ªãch n√†o
        if (transactions == null || transactions.isEmpty()) {
            return new ApiResponse<>("Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ giao d·ªãch n√†o cho t√†i kho·∫£n n√†y", null);
        }

        // Tr·∫£ k·∫øt qu·∫£
        return new ApiResponse<>("L·ªãch s·ª≠ giao d·ªãch", transactions);
    }

    public void logout(String token) {
        if (token != null) {
            blacklistedTokens.add(token);
        }
    }

    public boolean isTokenBlacklisted(String token) {
        return token != null && blacklistedTokens.contains(token);
    }
}