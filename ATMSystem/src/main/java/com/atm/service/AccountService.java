package com.atm.service;

import com.atm.dto.AccountDTO;
import com.atm.model.Account;
import com.atm.model.Credential;
import com.atm.repository.AccountRepository;
import com.atm.repository.BalanceRepository;
import com.atm.repository.CredentialRepository;
import com.atm.model.Balance;
import com.atm.util.JwtUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class AccountService {
    private static final Logger logger = LoggerFactory.getLogger(AccountService.class);

    @Autowired
    private AccountRepository accountRepository;
    @Autowired
    private CredentialRepository credentialRepository;
    @Autowired
    private BalanceRepository balanceRepository;

    private final PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    @Autowired
    public AccountService(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }
    @Autowired
    private JdbcTemplate jdbcTemplate;
    @Autowired
    private JwtUtil jwtUtil;

    public Account getAccount(String accountNumber) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);

        if (accountOpt.isPresent()) {
            Account account = accountOpt.get();
            logger.info("üîç T√†i kho·∫£n t√¨m th·∫•y: {}, Role: {}", account.getAccountNumber(), account.getRole());
            return account;
        }

        logger.warn("‚ö† Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n: {}", accountNumber);
        return null;
    }


    // ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
    @Transactional
    public Account register(Account account) {
        logger.info("Received request to register account: {}", account.getAccountNumber());

        if (accountRepository.existsById(account.getAccountNumber())) {
            logger.error("Account already exists: {}", account.getAccountNumber());
            throw new IllegalArgumentException("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!");
        }

        String userId = account.getUserId();
        logger.info("Checking user existence for userId: {}", userId);

        if (userId == null || userId.isEmpty() || !isUserExists(userId)) {
            logger.info("User does not exist, creating new user for fullName: {}", account.getFullName());
            userId = createUser(account.getFullName());
            account.setUserId(userId);
            logger.info("Created new user with userId: {}", userId);
        }

        // L∆∞u t√†i kho·∫£n v√†o b·∫£ng Account
        Account savedAccount = accountRepository.save(account);

        // T·∫°o v√† l∆∞u th√¥ng tin Balance
        Balance balance = new Balance();
        balance.setAccountNumber(savedAccount.getAccountNumber());
        balance.setAvailableBalance(0.0); // S·ªë d∆∞ m·∫∑c ƒë·ªãnh
        balance.setLastUpdated(LocalDateTime.now());
        balanceRepository.save(balance);
        logger.info("Balance record created for account: {}", savedAccount.getAccountNumber());

        // T·∫°o th√¥ng tin Credential
        Credential credential = new Credential();
        credential.setAccountNumber(savedAccount.getAccountNumber());
        credential.setPin(passwordEncoder.encode("000000")); // M√£ h√≥a PIN m·∫∑c ƒë·ªãnh
        credential.setFailedAttempts(0);
        credential.setLockTime(null);
        credential.setUpdateAt(LocalDateTime.now());
        credentialRepository.save(credential);

        logger.info("Successfully registered account: {}", savedAccount.getAccountNumber());
        return savedAccount;
    }

    // ƒêƒÉng nh·∫≠p (Authenticate)
    public boolean authenticate(String accountNumber, String password) {
        Optional<Account> account = accountRepository.findByAccountNumber(accountNumber);

        if (account.isPresent()) {
            // So s√°nh tr·ª±c ti·∫øp m·∫≠t kh·∫©u
            return password.equals(account.get().getPassword());
        }
        return false;
    }

    @Transactional
    public void updateAccount(AccountDTO accountDTO) {
        Optional<Account> optionalAccount = accountRepository.findById(accountDTO.getAccountNumber());

        if (optionalAccount.isPresent()) {
            Account account = optionalAccount.get();
            account.setPin(accountDTO.getPin());
            account.setPhoneNumber(accountDTO.getPhoneNumber());
            account.setFullName(accountDTO.getFullName());
            account.setBalance(accountDTO.getBalance());

//            accountRepository.save(account);
            accountRepository.updateFullName(accountDTO.getAccountNumber(), accountDTO.getFullName());
            accountRepository.updatePhoneNumber(accountDTO.getAccountNumber(), accountDTO.getPhoneNumber());
        } else {
            throw new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.");
        }
    }

//    public Double getBalance(String accountNumber) {
//        return accountRepository.findByAccountNumber(accountNumber)
//                .map(Account::getBalance)
//                .orElse(null);
//    }
    public Double getBalance(String accountNumber) {
        // L·∫•y t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p
        String loggedInAccountNumber = getLoggedInAccountNumber();

        // Ki·ªÉm tra xem t√†i kho·∫£n y√™u c·∫ßu c√≥ ph·∫£i c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p hay kh√¥ng
        if (!accountNumber.equals(loggedInAccountNumber)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p s·ªë d∆∞ c·ªßa t√†i kho·∫£n n√†y.");
        }

        return accountRepository.findByAccountNumber(accountNumber)
                .map(Account::getBalance)
                .orElseThrow(() -> new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."));
    }

    // H√†m l·∫•y s·ªë t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    public String getLoggedInAccountNumber() {
        System.out.println("üîç Ki·ªÉm tra SecurityContextHolder: " + SecurityContextHolder.getContext().getAuthentication());

        if (SecurityContextHolder.getContext().getAuthentication() == null) {
            System.out.println("‚ùå SecurityContextHolder is NULL!");
            return null;
        }

        return (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }

    // L·∫•y t·∫•t c·∫£ kh√°ch h√†ng (d√†nh cho nh√¢n vi√™n ng√¢n h√†ng)
    public List<Account> getAllCustomers() {
        return accountRepository.findAll();
    }

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    public boolean isUserExists(String userId) {
        String sql = "SELECT COUNT(*) FROM user WHERE user_id = ?";
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, userId);
        return count != null && count > 0;
    }

    // T·∫°o user m·ªõi v√† tr·∫£ v·ªÅ userId (gi·∫£ s·ª≠ user_id l√† UUID ho·∫∑c b·∫°n t·ª± sinh chu·ªói)
    public String createUser(String fullName) {
        String userId = java.util.UUID.randomUUID().toString();
        String sql = "INSERT INTO `User` (user_id, name) VALUES (?, ?)";
        int rows = jdbcTemplate.update(sql, userId, fullName);
        if (rows > 0) {
            System.out.println("User created with ID: " + userId);
            return userId;
        } else {
            throw new RuntimeException("Failed to create user");
        }
    }
    public String authenticateAndGenerateToken(String accountNumber, String password) {
        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);

        if (accountOpt.isPresent()) {
            Account account = accountOpt.get();

            // Ki·ªÉm tra m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
            if (passwordEncoder.matches(password, account.getPassword())) {
                String role = account.getRole(); // L·∫•y role tr·ª±c ti·∫øp t·ª´ entity
                logger.info("üîç Role t·ª´ DB khi ƒëƒÉng nh·∫≠p: {}", role);

                // T·∫°o JWT v·ªõi role t·ª´ DB
                return jwtUtil.generateToken(accountNumber, role, 86400000); // Token h·∫øt h·∫°n sau 1 ng√†y
            } else {
                throw new IllegalArgumentException("Sai m·∫≠t kh·∫©u!");
            }
        } else {
            throw new IllegalArgumentException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
        }
    }
    public Optional<Account> getAccountByNumberAndPassword(String accountNumber, String password) {
        return accountRepository.findByAccountNumberAndPassword(accountNumber, password);
    }
}