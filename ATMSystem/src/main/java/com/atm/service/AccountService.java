package com.atm.service;

import com.atm.dto.AccountDTO;
import com.atm.model.*;
import com.atm.repository.AccountRepository;
import com.atm.repository.BalanceRepository;
import com.atm.repository.CredentialRepository;
import com.atm.repository.UserRepository;
import com.atm.util.JwtUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class AccountService {
    private static final Logger logger = LoggerFactory.getLogger(AccountService.class);

    private final AccountRepository accountRepository;
    private final CredentialRepository credentialRepository;
    private final BalanceRepository balanceRepository;
    private final UserRepository userRepository;
    private final JdbcTemplate jdbcTemplate;
    private final JwtUtil jwtUtil;
    private final PasswordEncoder passwordEncoder;
    private final BalanceService balanceService;
    private final CredentialService credentialService;
    private final UserService userService;

    @Autowired
    public AccountService(AccountRepository accountRepository,
                          CredentialRepository credentialRepository,
                          BalanceRepository balanceRepository,
                          UserRepository userRepository,
                          JdbcTemplate jdbcTemplate,
                          JwtUtil jwtUtil,
                          PasswordEncoder passwordEncoder,
                          BalanceService balanceService,
                          CredentialService credentialService,
                          UserService userService) {
        this.accountRepository = accountRepository;
        this.credentialRepository = credentialRepository;
        this.balanceRepository = balanceRepository;
        this.userRepository = userRepository;
        this.jdbcTemplate = jdbcTemplate;
        this.jwtUtil = jwtUtil;
        this.passwordEncoder = passwordEncoder;
        this.balanceService = balanceService;
        this.credentialService = credentialService;
        this.userService = userService;
    }

    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n d·ª±a tr√™n th√¥ng tin t·ª´ AccountDTO.
     * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v√† g·ªçi h√†m createAccount ƒë·ªÉ x·ª≠ l√Ω logic t·∫°o t√†i kho·∫£n.
     *
     * @param accountDTO ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin t√†i kho·∫£n c·∫ßn ƒëƒÉng k√Ω.
     */
    public void registerAccount(AccountDTO accountDTO) {
        // Chuy·ªÉn ƒë·ªïi AccountDTO th√†nh ƒë·ªëi t∆∞·ª£ng Account.
        Account account = accountDTO.toAccount(userRepository);

        // Ghi log ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin ƒë√£ nh·∫≠n.
        logger.info("Account registered successfully for userId: {}", accountDTO.getUserId());

        // G·ªçi h√†m createAccount ƒë·ªÉ x·ª≠ l√Ω logic ki·ªÉm tra v√† l∆∞u t√†i kho·∫£n.
        createAccount(account);
    }

    /**
     * T·∫°o t√†i kho·∫£n trong h·ªá th·ªëng.
     * Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa t√†i kho·∫£n v√† ng∆∞·ªùi d√πng, ƒë·ªìng th·ªùi t·∫°o c√°c th·ª±c th·ªÉ li√™n quan.
     *
     * @param account ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin t√†i kho·∫£n.
     * @return T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o.
     */
    @Transactional
    public Account createAccount(Account account) {
        logger.info("üîç ƒêang v√†o ph∆∞∆°ng th·ª©c createAccount...");
        logger.info("Received request to register account: {}", account.getAccountNumber());

        // 1. Ki·ªÉm tra xem t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i hay ch∆∞a.
        if (accountRepository.existsById(account.getAccountNumber())) {
            logger.error("Account already exists: {}", account.getAccountNumber());
            throw new IllegalArgumentException("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!");
        }

        // 2. Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng (User) c·ªßa t√†i kho·∫£n.
        User user = account.getUser();
        if (user == null) {
            logger.info("User c·ªßa t√†i kho·∫£n l√† null, ki·ªÉm tra l·∫°i t·ª´ DB...");
            user = userRepository.findByUserId(account.getUser().getUserId()).orElse(null);

            // N·∫øu User t·ªìn t·∫°i nh∆∞ng t√™n kh√¥ng kh·ªõp, n√©m ngo·∫°i l·ªá.
            if (user != null && !user.getName().equals(account.getFullName())) {
                logger.error("User v·ªõi ID {} ƒë√£ t·ªìn t·∫°i nh∆∞ng c√≥ t√™n kh√°c: {}", account.getUser().getUserId(), user.getName());
                throw new IllegalArgumentException("T√™n ng∆∞·ªùi d√πng kh√¥ng kh·ªõp v·ªõi userId!");
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y User, t·∫°o User m·ªõi.
            if (user == null) {
                logger.info("Kh√¥ng t√¨m th·∫•y User, t·∫°o User m·ªõi...");
                user = new User();
                user.setUserId(account.getUser().getUserId());
                user.setName(account.getFullName());
                userRepository.save(user);
                logger.info("User m·ªõi ƒë∆∞·ª£c t·∫°o v·ªõi ID: {}", user.getUserId());
            }
        }
        account.setUser(user);

        // 3. L∆∞u t√†i kho·∫£n v√†o b·∫£ng Account.
        Account savedAccount = accountRepository.save(account);

        balanceService.createBalance(savedAccount);
        credentialService.createCredential(savedAccount);

        logger.info("Successfully created account: {}", savedAccount.getAccountNumber());
        return savedAccount;
    }

    @Transactional
    public void updateAccount(AccountDTO accountDTO, String accountNumber) {
        Optional<Account> optionalAccount = accountRepository.findById(accountDTO.getAccountNumber());

        if (optionalAccount.isEmpty()) {
            throw new RuntimeException("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.");
        }

        Account account = optionalAccount.get();

        // Ki·ªÉm tra quy·ªÅn
        checkUpdatePermission(accountNumber, accountDTO);

        // C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
        updateAccountDetails(account, accountDTO);

        // C·∫≠p nh·∫≠t s·ªë d∆∞
        balanceService.updateBalance(accountDTO, account, TransactionType.DEPOSIT);
        // C·∫≠p nh·∫≠t th√¥ng tin b·∫£o m·∫≠t (Credential)
        if (accountDTO.getPin() != null) {
            credentialService.changePIN(accountDTO);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        if (account.getUser() != null) {
            userService.updateUserDetails(account.getUser(), accountDTO);
        } else {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng li√™n k·∫øt v·ªõi t√†i kho·∫£n n√†y.");
        }

        // L∆∞u Account sau khi c·∫≠p nh·∫≠t
        accountRepository.save(account);
    }

    private void checkUpdatePermission(String accountNumber, AccountDTO accountDTO) {
        String userRole = getUserRole(accountNumber);
        if (!"ADMIN".equals(userRole) && !accountNumber.equals(accountDTO.getAccountNumber())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t t√†i kho·∫£n n√†y!");
        }
    }

    private void updateAccountDetails(Account account, AccountDTO accountDTO) {
        if (accountDTO.getFullName() != null) {
            account.setFullName(accountDTO.getFullName());
        }
        if (accountDTO.getRole() != null && !accountDTO.getRole().isEmpty()) {
            account.setRole(accountDTO.getRole());
        }
    }

    // L·∫•y t·∫•t c·∫£ kh√°ch h√†ng (d√†nh cho nh√¢n vi√™n ng√¢n h√†ng)
    public List<Account> getAllCustomers() {
        return accountRepository.findAll();
    }
    public String getUserRole(String accountNumber) {
        return accountRepository.findRoleByAccountNumber(accountNumber);
    }

//    public Account getAccount(String accountNumber) {
//        Optional<Account> accountOpt = accountRepository.findByAccountNumber(accountNumber);
//
//        if (accountOpt.isPresent()) {
//            Account account = accountOpt.get();
//            logger.info("üîç T√†i kho·∫£n t√¨m th·∫•y: {}, Role: {}", account.getAccountNumber(), account.getRole());
//            return account;
//        }
//
//        logger.warn("‚ö† Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n: {}", accountNumber);
//        return null;
//    }

//    public void updateAccountStatus(String new_status) {
//        // Danh s√°ch tr·∫°ng th√°i h·ª£p l·ªá
//        List<String> validStatuses = Arrays.asList("ACTIVE", "CLOSED", "FROZEN", "BLOCKED", "PENDING");
//
//        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa tr·∫°ng th√°i
//        if (!validStatuses.contains(new_status)) {
//            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + new_status);
//        }
//
//        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
//        account.setStatus(new_status);
//        accountRepository.save(account); // L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
//
//        System.out.println("Tr·∫°ng th√°i t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: " + new_status);
//    }

//    public String checkAccountStatus() {
//        // Assume 'status' is a field in your Account class
//        switch (account.getStatus()) {
//            case "ACTIVE":
//                return "The account is active.";
//            case "CLOSED":
//                return "The account has been closed.";
//            case "FROZEN":
//                return "The account is frozen.";
//            case "BLOCKED":
//                return "The account is blocked.";
//            case "PENDING":
//                return "The account is pending.";
//            default:
//                return "Unknown status.";
//        }
//    }
    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
//    public boolean isUserExists(String userId) {
//        String sql = "SELECT COUNT(*) FROM user WHERE user_id = ?";
//        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, userId);
//        return count != null && count > 0;
//    }
}